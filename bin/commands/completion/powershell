# Copyright (c) 2014 Jason Jarrett
#
# Tab completion for the `tog`
#
# Usage:
#
# To enable powershell <tab> completion for tog you need to be running
# at least PowerShell v3 or greater and add the below to your $PROFILE
#
#     Invoke-Expression ((tog completion powershell) -join [System.Environment]::NewLine)
#
#

$tog_completion_Process = {
    param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameter)

  throw "this was copied from an un-tested skypeit completion..."


  # Load up an assembly to read the tog config file's sha1
  if(-not $global:togSHA1Managed) {
    [Reflection.Assembly]::LoadWithPartialName("System.Security") | out-null
    $global:togSHA1Managed = new-Object System.Security.Cryptography.SHA1Managed
  }

  # setup a global (in-memory) cache
  if(-not $global:togfileShaCache) {
    $global:togfileShaCache = @{};
  }

  $cache = $global:togfileShaCache;

  # Get the togfile's sha1
  $sha1togFile = (resolve-path "~/.togrc" -ErrorAction Ignore | %{
    $file = [System.IO.File]::Open($_.Path, "open", "read")
    [string]::join('', ($global:togSHA1Managed.ComputeHash($file) | %{ $_.ToString("x2") }))
    $file.Dispose()
  })

  # lookup the sha1 for previously cached task lists.
  if($cache.ContainsKey($sha1togFile)){
    $tasks = $cache[$sha1togFile];
  } else {
    $tasks = (tog completion).split("`n");
    $cache[$sha1togFile] = $tasks;
  }


    $tasks |
        where { $_.startswith($commandName) }
        Sort-Object |
        foreach { New-Object System.Management.Automation.CompletionResult $_, $_, 'ParameterValue', ('{0}' -f $_) }
}

if (-not $global:options) {
    $global:options = @{
        CustomArgumentCompleters = @{};
        NativeArgumentCompleters = @{}
    }
}

$global:options['NativeArgumentCompleters']['tog'] = $tog_completion_Process
$function:tabexpansion2 = $function:tabexpansion2 -replace 'End\r\n{','End { if ($null -ne $options) { $options += $global:options} else {$options = $global:options}'
